import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { ApplicationService } from '../services/application.service';
import { FormsModule } from '@angular/forms';
import { NgIf, NgFor } from '@angular/common';
import { getSpecialites } from '../services/apiService';
import { DemandeInscription, Specialite } from '../services/interfaces';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
  imports: [
    FormsModule,
    NgIf,
    NgFor
  ]
})
export class HomeComponent implements OnInit {
  firstName: string = '';
  lastName: string = '';
  email: string = '';
  password: string = '';
  specialite: string = '';
  grades: number = 0;
  successMessage: string = '';
  errorMessage: string = '';
  specialites: Specialite[] = [];

  constructor(private applicationService: ApplicationService, private router: Router) {}

  async ngOnInit() {
    try {
      this.specialites = await getSpecialites();
    } catch (error) {
      console.error('Error fetching specialites:', error);
      this.errorMessage = 'Erreur lors du chargement des sp?cialit?s';
    }
  }

  submitApplication(): void {
    console.log("Selected specialite:", this.specialite);
    console.log("Available specialites:", this.specialites);
    
    const foundSpecialite = this.specialites.find(s => s.nom === this.specialite);
    console.log("Found specialite:", foundSpecialite);

    try {
      // Format and validate the data before submission
      const application: DemandeInscription = {
        demande_id: 0, // This will be generated by the database
        firstName: this.firstName.trim(),
        lastName: this.lastName.trim(),
        email: this.email.trim(),
        mdp: this.password,
        id_specialite: foundSpecialite?.specialite_id || 0,
        grades: Number(this.grades) // Ensure grades is a number
      };

      // Validate all fields are present
      const missingFields = Object.entries(application)
        .filter(([key, value]) => key !== 'demande_id' && (value === undefined || value === null || value === ''))
        .map(([key]) => key);

      if (missingFields.length > 0) {
        this.errorMessage = `Veuillez remplir les champs suivants : ${missingFields.join(', ')}`;
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(application.email)) {
        this.errorMessage = 'Veuillez entrer une adresse email valide.';
        return;
      }

      // Validate grades
      if (isNaN(application.grades) || application.grades < 0 || application.grades > 20) {
        this.errorMessage = 'La note doit ?tre comprise entre 0 et 20.';
        return;
      }

      // Submit the application
      this.applicationService
        .submitApplication(application)
        .then(() => {
          this.successMessage = 'Votre candidature a ?t? soumise avec succ?s !';
          this.errorMessage = '';
          this.resetForm();
        })
        .catch((error) => {
          console.error('Submission error:', error);
          this.errorMessage = 'Une erreur s\'est produite lors de la soumission.';
          this.successMessage = '';
        });

    } catch (error) {
      console.error('Unexpected error:', error);
      this.errorMessage = 'Une erreur inattendue s\'est produite.';
      this.successMessage = '';
    }
  }

  private resetForm(): void {
    this.firstName = '';
    this.lastName = '';
    this.email = '';
    this.password = '';
    this.specialite = '';
    this.grades = 0;
  }
}
